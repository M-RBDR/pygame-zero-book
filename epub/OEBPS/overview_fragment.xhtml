<?xml version="1.0" encoding="utf-8"?>
        <!DOCTYPE html>

        <html xmlns="http://www.w3.org/1999/xhtml">
        <head>
          <title>Chapter 1</title>
          <link rel="stylesheet" href="styles/pygments.css" type="text/css" />
          <link rel="stylesheet" href="styles/softcover.css" type="text/css" />
          <link rel="stylesheet" href="styles/epub.css" type="text/css" />
          <link rel="stylesheet" href="styles/custom.css" type="text/css"/>
          <link rel="stylesheet" href="styles/custom_epub.css" type="text/css"/>
          <link rel="stylesheet" type="application/vnd.adobe-page-template+xml" href="styles/page-template.xpgt" />
        </head>

        <body>
          <div id="cid1" class="chapter"><h1><a href="overview_fragment.xhtml#cid1" class="heading hyperref"><span class="number">Chapter 1 </span>Overview of Python</a></h1>
</div><div id="cid2" class="section"><h2><a href="overview_fragment.xhtml#cid2" class="heading hyperref"><span class="number">1.1 </span>Comments</a></h2>
<p class="noindent">A computer program is intended to be understood by both humans and computers.<span class="intersentencespace"></span> However to make it easier for the humans, it can also contain
comments written in English.</p>
<div class="code"><div class="highlight"><pre><span></span><span class="c1"># A comment looks like this</span>
</pre></div></div>
<p>Python ignores comments.<span class="intersentencespace"></span> They provide explanations for the human readers.</p>
</div><div id="cid3" class="section"><h2><a href="overview_fragment.xhtml#cid3" class="heading hyperref"><span class="number">1.2 </span>Literals</a></h2>
<p class="noindent">A Python program can contain any number and any <em>string</em> of text surrounded by quotes.</p>
<p>Examples:</p>
<table class="tabular"><tr class="top_border bottom_border"><td class="left_border align_left right_border">5</td>
<td class="align_left right_border">1.23</td>
<td class="align_left right_border">“Hello”</td>
<td class="align_left right_border">‘Barry’</td>
</tr></table>
</div><div id="cid4" class="section"><h2><a href="overview_fragment.xhtml#cid4" class="heading hyperref"><span class="number">1.3 </span>Keywords</a></h2>
<p class="noindent">Every computer language has a number of <em>keywords</em> that you will need to learn along with their meanings.<span class="intersentencespace"></span> Fortunately they look like English words and there are only a few of them in Python.<span class="intersentencespace"></span> You could tick them off
as you meet them.</p>
<table class="tabular"><tr class="top_border"><td class="left_border align_left right_border">False</td>
<td class="align_left right_border">None</td>
<td class="align_left right_border">True</td>
<td class="align_left right_border">and</td>
<td class="align_left right_border">as</td>
<td class="align_left right_border">assert</td>
<td class="align_left right_border">async</td>
<td class="align_left right_border">await</td>
</tr><tr><td class="left_border align_left right_border">break</td>
<td class="align_left right_border">class</td>
<td class="align_left right_border">continue</td>
<td class="align_left right_border">def</td>
<td class="align_left right_border">del</td>
<td class="align_left right_border">elif</td>
<td class="align_left right_border">else</td>
<td class="align_left right_border">except</td>
</tr><tr><td class="left_border align_left right_border">finally</td>
<td class="align_left right_border">for</td>
<td class="align_left right_border">from</td>
<td class="align_left right_border">global</td>
<td class="align_left right_border">if</td>
<td class="align_left right_border">import</td>
<td class="align_left right_border">in</td>
<td class="align_left right_border">is</td>
</tr><tr><td class="left_border align_left right_border">lambda</td>
<td class="align_left right_border">nonlocal</td>
<td class="align_left right_border">not</td>
<td class="align_left right_border">or</td>
<td class="align_left right_border">pass</td>
<td class="align_left right_border">raise</td>
<td class="align_left right_border">return</td>
<td class="align_left right_border">try</td>
</tr><tr class="bottom_border"><td class="left_border align_left right_border">while</td>
<td class="align_left right_border">with</td>
<td class="align_left right_border">yield</td>
<td class="align_left right_border"></td>
<td class="align_left right_border"></td>
<td class="align_left right_border"></td>
<td class="align_left right_border"></td>
<td class="align_left right_border"></td>
</tr></table>
</div><div id="cid5" class="section"><h2><a href="overview_fragment.xhtml#cid5" class="heading hyperref"><span class="number">1.4 </span>Built-ins</a></h2>
<p class="noindent">Python also comes with a large number of <em>functions</em>.<span class="intersentencespace"></span> The most common ones are built-in and always available, much
like the keywords.<span class="intersentencespace"></span> Here is a list of them, just for the sake of completeness, <em>but you probably won’t ever use them all</em>, and when you do use one
you will probably look it up in the documentation.<span class="intersentencespace"></span> So you <em>don’t need to remember these</em>.</p>
<table class="tabular"><tr class="top_border"><td class="left_border align_left right_border">abs</td>
<td class="align_left right_border">all</td>
<td class="align_left right_border">any</td>
<td class="align_left right_border">ascii</td>
<td class="align_left right_border">bin</td>
<td class="align_left right_border">bool</td>
</tr><tr><td class="left_border align_left right_border">breakpoint</td>
<td class="align_left right_border">bytearray</td>
<td class="align_left right_border">bytes</td>
<td class="align_left right_border">callable</td>
<td class="align_left right_border">chr</td>
<td class="align_left right_border">classmethod</td>
</tr><tr><td class="left_border align_left right_border">compile</td>
<td class="align_left right_border">complex</td>
<td class="align_left right_border">copyright</td>
<td class="align_left right_border">credits</td>
<td class="align_left right_border">delattr</td>
<td class="align_left right_border">dict</td>
</tr><tr><td class="left_border align_left right_border">dir</td>
<td class="align_left right_border">divmod</td>
<td class="align_left right_border">enumerate</td>
<td class="align_left right_border">eval</td>
<td class="align_left right_border">exec</td>
<td class="align_left right_border">exit</td>
</tr><tr><td class="left_border align_left right_border">filter</td>
<td class="align_left right_border">float</td>
<td class="align_left right_border">format</td>
<td class="align_left right_border">frozenset</td>
<td class="align_left right_border">getattr</td>
<td class="align_left right_border">globals</td>
</tr><tr><td class="left_border align_left right_border">hasattr</td>
<td class="align_left right_border">hash</td>
<td class="align_left right_border">help</td>
<td class="align_left right_border">hex</td>
<td class="align_left right_border">id</td>
<td class="align_left right_border">input</td>
</tr><tr><td class="left_border align_left right_border">int</td>
<td class="align_left right_border">isinstance</td>
<td class="align_left right_border">issubclass</td>
<td class="align_left right_border">iter</td>
<td class="align_left right_border">len</td>
<td class="align_left right_border">license</td>
</tr><tr><td class="left_border align_left right_border">list</td>
<td class="align_left right_border">locals</td>
<td class="align_left right_border">map</td>
<td class="align_left right_border">max</td>
<td class="align_left right_border">memoryview</td>
<td class="align_left right_border">min</td>
</tr><tr><td class="left_border align_left right_border">next</td>
<td class="align_left right_border">object</td>
<td class="align_left right_border">oct</td>
<td class="align_left right_border">open</td>
<td class="align_left right_border">ord</td>
<td class="align_left right_border">pow</td>
</tr><tr><td class="left_border align_left right_border">print</td>
<td class="align_left right_border">property</td>
<td class="align_left right_border">quit</td>
<td class="align_left right_border">range</td>
<td class="align_left right_border">repr</td>
<td class="align_left right_border">reversed</td>
</tr><tr><td class="left_border align_left right_border">round</td>
<td class="align_left right_border">set</td>
<td class="align_left right_border">setattr</td>
<td class="align_left right_border">slice</td>
<td class="align_left right_border">sorted</td>
<td class="align_left right_border">staticmethod</td>
</tr><tr><td class="left_border align_left right_border">str</td>
<td class="align_left right_border">sum</td>
<td class="align_left right_border">super</td>
<td class="align_left right_border">tuple</td>
<td class="align_left right_border">type</td>
<td class="align_left right_border">vars</td>
</tr><tr class="bottom_border"><td class="left_border align_left right_border">zip</td>
<td class="align_left right_border"></td>
<td class="align_left right_border"></td>
<td class="align_left right_border"></td>
<td class="align_left right_border"></td>
<td class="align_left right_border"></td>
</tr></table>
<p>Once you understand all of these you effectively understand all of the Python language.<span class="intersentencespace"></span> By the end of this book you
will be familiar with at least 20 keywords / functions which is enough to create a huge variety of programs.</p>
</div><div id="cid6" class="section"><h2><a href="overview_fragment.xhtml#cid6" class="heading hyperref"><span class="number">1.5 </span>Libraries</a></h2>
<p class="noindent">There are many more functions available (too many to list here), but not everyone will need them, so they are kept in libraries.<span class="intersentencespace"></span> Some libraries
are supplied with Python.<span class="intersentencespace"></span> You can use their functions only after first <em>importing</em> the relevant library module.<span class="intersentencespace"></span> For
example, if you want a random number, import the random library:</p>
<div class="code"><div class="highlight"><pre><span></span><span class="kn">from</span> <span class="nn">random</span> <span class="kn">import</span> <span class="n">randint</span>
<span class="k">print</span><span class="p">(</span><span class="n">randint</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">10</span><span class="p">))</span>
</pre></div></div>
<p>Other libraries are not supplied with Python and must be downloaded separately, such as the Minecraft, Pygame and Richlib libraries.</p>
</div><div id="cid7" class="section"><h2><a href="overview_fragment.xhtml#cid7" class="heading hyperref"><span class="number">1.6 </span>Names</a></h2>
<p class="noindent">You will see many words in a program that appear to be English words and yet they are not literals, keywords or library functions.<span class="intersentencespace"></span> These are names chosen by the programmer.<span class="intersentencespace"></span> For example, if the program needs to record a score and store it in a variable, the
programmer might choose to give that variable the name <code>score</code>:</p>
<div class="code"><div class="highlight"><pre><span></span><span class="n">score</span> <span class="o">=</span> <span class="mi">1</span>
<span class="k">print</span><span class="p">(</span><span class="s2">"Score: "</span><span class="p">,</span> <span class="n">score</span><span class="p">)</span>
</pre></div></div>
<p>Python has no understanding of what <code>score</code> means.<span class="intersentencespace"></span> It only cares that the same word is used every time.<span class="intersentencespace"></span> So a different programmer
might decide to write the program like this:</p>
<div class="code"><div class="highlight"><pre><span></span><span class="n">points</span> <span class="o">=</span> <span class="mi">1</span>
<span class="k">print</span><span class="p">(</span><span class="s2">"Score: "</span><span class="p">,</span> <span class="n">points</span><span class="p">)</span>
</pre></div></div>
<p>A programmer who doesn’t like typing might use a shorter, less descriptive name:
</p><div class="code"><div class="highlight"><pre><span></span><span class="n">p</span> <span class="o">=</span> <span class="mi">1</span>
<span class="k">print</span><span class="p">(</span><span class="s2">"Score: "</span><span class="p">,</span> <span class="n">p</span><span class="p">)</span>
</pre></div></div>
<p>However the programmer must be consistent.<span class="intersentencespace"></span> This <strong>would not work</strong>:
</p><div class="code"><div class="highlight"><pre><span></span><span class="n">points</span> <span class="o">=</span> <span class="mi">1</span>
<span class="k">print</span><span class="p">(</span><span class="s2">"Score: "</span><span class="p">,</span> <span class="n">score</span><span class="p">)</span>
</pre></div></div>
</div><div id="cid8" class="section"><h2><a href="overview_fragment.xhtml#cid8" class="heading hyperref"><span class="number">1.7 </span>Whitespace</a></h2>
<p class="noindent">Python is unusual in that it cares about <em>whitespace</em>, i.e.<span class="intersentencespace"></span> what you get when you press the <em>tab</em> key or the <em>space</em> bar on the keyboard.</p>
<p>Python programs are arranged in blocks of lines.<span class="intersentencespace"></span> Every line in a block must have the same amount of whitespace preceding it - the <em>indentation</em>.<span class="intersentencespace"></span> See <a href="3_python_fundamentals_fragment.xhtml#code-blocks" class="hyperref">Program <span class="ref">2.19</span></a> for an example.</p>
</div>
        </body>
        </html>